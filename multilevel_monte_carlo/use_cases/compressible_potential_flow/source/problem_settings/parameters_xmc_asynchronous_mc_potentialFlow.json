{
    "XMCAlgorithmInputDictionary": {
	"checkInitialisation": "xmc.methodDefs_xmcAlgorithm.checkInitialisation.checkInitialisationMC",
        "errorsForStoppingCriterion": [0],
        "estimatorsForHierarchy": [[0,[1,true,true]]],
        "predictorsForHierarchy": [],
        "tolerancesForHierarchy": [0],
        "positionMaxNumberIterationsCriterion": 2
    },
    "costEstimatorInputDictionary": {
        "indexSetDimension": 0,
        "order": 1
    },
    "hierarchyOptimiserInputDictionary": {
        "defaultHierarchy": [[[],5]],
        "indexSpace": [1,1],
        "optimalIndexSet": "xmc.methodDefs_hierarchyOptimiser.optimalIndexSet.zeroDimensionSamplesOnly",
        "optimalSampleNumbers": "xmc.methodDefs_hierarchyOptimiser.optimalSampleNumbers.singleIndexConstantSampleNumber",
        "toleranceSplittingBounds": [0.5,0.5]
    },
    "monteCarloIndexInputDictionary": {
        "costEstimator": "xmc.momentEstimator.MomentEstimator",
        "indexValue": null,
        "qoiEstimator": ["xmc.momentEstimator.MomentEstimator"],
        "combinedEstimator": ["xmc.momentEstimator.CombinedMomentEstimator"],
        "sampler": "xmc.sampleGenerator.SampleGenerator",
        "eventGroupSize": 5
    },
    "monteCarloSamplerInputDictionary": {
        "assemblersForError": [[1]],
        "costPredictor": null,
        "estimatorsForAssembler": [[[0,[1,true,false]]],[[0,[1,true,true]]]],
        "estimatorsForPredictor": [[null]],
        "indexConstructor": "xmc.monteCarloIndex.MonteCarloIndex",
        "indices": [],
        "qoiPredictor": [],
        "initialNumberBatches": 1
    },
    "qoiEstimatorInputDictionary": {
        "indexSetDimension": 0,
        "order": 5
    },
    "combinedEstimatorInputDictionary": {
        "indexSetDimension": 0,
        "order": 5
    },
    "randomGeneratorInputDictionary": {
        "generator": "xmc.methodDefs_randomGeneratorWrapper.generator.returnUniformAndTwoNormal",
        "parameters": [0,4294967295,0.3,0.003,-0.035,0.00035]
    },
    "samplerInputDictionary": {
        "randomGenerator": "xmc.randomGeneratorWrapper.RandomGeneratorWrapper",
        "solverWrapper": "xmc.classDefs_solverWrapper.KratosSolverWrapper.KratosSolverWrapper",
        "solverWrapperIndices": null
    },
    "solverWrapperInputDictionary": {
        "adaptiveRefinementJumpToFinestLevel": false,
        "asynchronous": true,
        "fakeRandomVariable": [0,0.3,0.0],
        "index": [],
        "mappingOutputQuantities": false,
        "numberContributionsPerInstance": 1,
        "numberQoI": 3433,
        "numberCombinedQoi": 0,
        "outputBatchSize": 1717,
        "parameters": null,
        "printToFile": true,
        "problemId": "problem_airfoil",
        "projectParametersPath": "problem_settings/parameters_potential_naca_lev2.json",
        "refinementParametersPath": "problem_settings/parameters_refinement.json",
        "refinementStrategy": "stochastic_adaptive_refinement",
        "taskAllAtOnce": true
    },
    "monoCriteriaInpuctDictionary" :{
        "statisticalError": {
            "criteria": "xmc.methodDefs_monoCriterion.criterionFunctions.isLowerThanOrEqualTo",
            "tolerance": [0.01],
            "input": "error0"
        },
        "minNumberIterations": {
            "criteria": "xmc.methodDefs_monoCriterion.criterionFunctions.isGreaterThanOrEqualTo",
            "tolerance": [0],
            "input": "algorithmCost"
        },
        "maxNumberIterations": {
            "criteria": "xmc.methodDefs_monoCriterion.criterionFunctions.isGreaterThanOrEqualTo",
            "tolerance": [0],
            "input": "algorithmCost"
        }
    },
    "multiCriterionInputDictionary": {
        "interpreter": "xmc.methodDefs_multiCriterion.interpreter.interpretAsConvergenceAndIterationBounds",
        "flag": "xmc.methodDefs_multiCriterion.flag.plainFlag"
    },
    "errorEstimatorInputDictionary": {
        "error": "xmc.methodDefs_errorEstimator.errorEstimation.errorEstimationStatError",
        "parameters": [0.95]
    },
    "estimationAssemblerInputDictionary": {
        "expectationAssembler": {
            "assembleEstimation": "xmc.methodDefs_estimationAssembler.assembleEstimation.assembleValue"
        },
        "varianceAssembler": {
            "assembleEstimation": "xmc.methodDefs_estimationAssembler.assembleEstimation.assembleStatisticalError"
        }
    }
}